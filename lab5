### Low Level

1. **Check if a number is positive, negative, or zero**

def check_number(num):
    if num > 0:
        return "Positive"
    elif num < 0:
        return "Negative"
    else:
        return "Zero"

number = -5
print(check_number(number))
```

**Output:**
```
Negative
```

2. **Check voting eligibility**

def can_vote(age):
    return "Eligible to vote" if age >= 18 else "Not eligible to vote"

print(can_vote(age))
```

**Output:**
```
Eligible to vote
```

3. **Determine if a year is a leap year**

def is_leap_year(year):
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
        return True
    else:
        return False

year = 2020
print(is_leap_year(year))
```

**Output:**
```
True
```

4. **Check for fever**

def has_fever(temp):
    return "Has fever" if temp >= 100.4 else "No fever"

temperature = 101.5
print(has_fever(temperature))
```

**Output:**
```
Has fever
```

5. **Find the largest among three numbers**

def largest_of_three(a, b, c):
    return max(a, b, c)

num1 = 10
num2 = 20
num3 = 15
print(largest_of_three(num1, num2, num3))
```

**Output:**
```
20
```

6. **Calculate total cost of a meal**

def calculate_total_cost(meal_cost, tax_rate, tip_rate):
    tax = meal_cost * (tax_rate / 100)
    tip = meal_cost * (tip_rate / 100)
    total_cost = meal_cost + tax + tip
    return total_cost

meal_cost = 50
tax_rate = 8
tip_rate = 15
print(calculate_total_cost(meal_cost, tax_rate, tip_rate))
```

**Output:**
```
63.0
```

7. **Classify a triangle**

def classify_triangle(a, b, c):
    if a == b == c:
        return "Equilateral"
    elif a == b or b == c or a == c:
        return "Isosceles"
    else:
        return "Scalene"

side1 = 3
side2 = 3
side3 = 3
print(classify_triangle(side1, side2, side3))
```

**Output:**
```
Equilateral
```

8. **Check if a year is leap year or common year**

def year_days(year):
    return 366 if is_leap_year(year) else 365

year = 2021
print(year_days(year))
```

**Output:**
```
365
```

9. **Check if a character is a vowel or consonant**

def vowel_or_consonant(char):
    vowels = 'aeiou'
    if char.lower() in vowels:
        return "Vowel"
    else:
        return "Consonant"

char = 'A'
print(vowel_or_consonant(char))
```

**Output:**
```
Vowel
```

10. **Output numbers in ascending order**

def sort_numbers(a, b, c):
    return sorted([a, b, c])

num1 = 20
num2 = 10
num3 = 30
print(sort_numbers(num1, num2, num3))
```

**Output:**
```
[10, 20, 30]
```

### Medium Level

1. **Grading System**

def determine_grade(score):
    if 90 <= score <= 100:
        return "Grade A"
    elif 80 <= score <= 89:
        return "Grade B"
    elif 70 <= score <= 79:
        return "Grade C"
    elif 60 <= score <= 69:
        return "Grade D"
    else:
        return "Grade F"

print(determine_grade(85))  # Expected output: Grade B
print(determine_grade(60))  # Expected output: Grade D
print(determine_grade(95))  # Expected output: Grade A
```

**Output:**
```
Grade B
Grade D
Grade A
```

2. **ATM Machine Simulation**

def atm_simulation(account_balance, withdrawal_amount):
    if withdrawal_amount <= account_balance:
        return "Transaction successful"
    else:
        return "Insufficient funds"

print(atm_simulation(1000, 500))  # Expected output: Transaction successful
print(atm_simulation(200, 300))   # Expected output: Insufficient funds
print(atm_simulation(1500, 1500)) # Expected output: Transaction successful
```

**Output:**
```
Transaction successful
Insufficient funds
Transaction successful
```

3. **Calculate roots of a quadratic equation**

import math

def calculate_roots(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant > 0:
        root1 = (-b + math.sqrt(discriminant)) / (2 * a)
        root2 = (-b - math.sqrt(discriminant)) / (2 * a)
        return root1, root2
    elif discriminant == 0:
        root = -b / (2 * a)
        return root, root
    else:
        return "No real roots"

print(calculate_roots(1, -3, 2))  # Expected output: (2.0, 1.0)
print(calculate_roots(2, 5, 2))   # Expected output: (-0.5, -2.0)
print(calculate_roots(1, -4, 4))  # Expected output: (2.0, 2.0)
```

**Output:**
```
(2.0, 1.0)
(-0.5, -2.0)
(2.0, 2.0)
```

4. **Recommended heart rate range during exercise**

```python
def heart_rate_range(age, gender):
    if gender.lower() == "male":
        max_hr = 220 - age
    else:
        max_hr = 226 - age
    lower_bound = 0.5 * max_hr
    upper_bound = 0.85 * max_hr
    return f"{int(lower_bound)} - {int(upper_bound)} bpm"

# Test cases
print(heart_rate_range(30, "Male"))    # Expected output: 93 - 157 bpm
print(heart_rate_range(45, "Female"))  # Expected output: 88 - 149 bpm
print(heart_rate_range(55, "Male"))    # Expected output: 85 - 145 bpm
```

**Output:**
```
93 - 157 bpm
88 - 149 bpm
85 - 145 bpm
```

5. **Number of days in a month considering leap years**

```python
def days_in_month(month, year):
    month_days = {
        "January": 31, "February": 28, "March": 31, "April": 30,
        "May": 31, "June": 30, "July": 31, "August": 31,
        "September": 30, "October": 31, "November": 30, "December": 31
    }
    if month == "February" and is_leap_year(year):
        return 29
    else:
        return month_days.get(month, "Invalid month")

# Test cases
print(days_in_month("February", 2020))  # Expected output: 29 days
print(days_in_month("April", 2023))     # Expected output: 30 days
print(days_in_month("December", 2021))  # Expected output: 31 days
```

**Output:**
```
29
30
31
```

### High Level

1. **Online Food Ordering System*

class OnlineFoodOrderingSystem:
    def __init__(self):
        self.menu = {
            "burger": 5.00, "pizza": 8.00, "salad": 4.00,
            "soda": 1.50, "fries": 2.50
        }
        self.cart = {}
        self.total = 0.0
        self.delivery_radius = 10  
        self.current_order_volume = 20  
    def browse_menu(self):
        for item, price in self.menu.items():
            print(f"{item.capitalize()}: ${price:.2f}")

    def add_to_cart(self, item, quantity):
        if item in self.menu:
            if item in self.cart:
                self.cart[item] += quantity
            else:
                self.cart[item] = quantity
            self.total += self.menu[item] * quantity
        else:
            print(f"{item} is not available
